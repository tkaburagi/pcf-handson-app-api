---
resource_types:
- name: google-cloud-storage
  type: docker-image
  source:
    repository: frodenas/gcs-resource

resources:
- name: api-tkaburagi
  type: git
  source:
    uri: {{github-uri}}
    branch: {{github-branch}}
  check_every: 10s

- name: version
  type: semver
  source:
    driver: git
    uri: https://github.com/tkaburagi/pcfdemoapp-version
    branch: master
    private_key: ((github-private-key))
    file: version

- name: candidate-release
  type: google-cloud-storage
  source:
    bucket: {{gcs-bucket-release-candidates}}
    regexp: demo-(.*).jar
    json_key: {{gcs-key}}

- name: final-release
  type: google-cloud-storage
  source:
    bucket: {{gcs-bucket-releases}}
    regexp: api-tkaburagi-(.*).jar
    json_key: {{gcs-key}}

- name: cf-staging
  type: cf
  source:
    api: {{cf-api}}
    username: {{cf-username}}
    password: {{cf-password}}
    organization: {{cf-org}}
    space: {{cf-space-staging}}
    skip_cert_check: true

- name: cf-production
  type: cf
  source:
    api: {{cf-api}}
    username: {{cf-username}}
    password: {{cf-password}}
    organization: {{cf-org}}
    space: {{cf-space-prod}}
    skip_cert_check: true

jobs:
- name: unit-test
  public: true
  plan:
  - get: api-tkaburagi
    trigger: true
  - task: unit
    file: api-tkaburagi/ci/tasks/unit.yml

- name: build-artifact
  serial_groups: [ version ]
  plan:
  - get: api-tkaburagi
    passed: [ unit-test ]
    trigger: true
  - get: version
    params: { pre: rc }
  - task: build
    file: api-tkaburagi/ci/tasks/build.yml
  - put: candidate-release
    params: { file: build/demo-*.jar }
  - put: version
    params: { file: version/number }

- name: integration-test
  serial: true
  plan:
  - get: candidate-release
    trigger: true
    passed: [ build-artifact ]
  - get: api-tkaburagi
    passed: [ build-artifact ]
  - get: version
    passed: [ build-artifact ]
  - task: prepare-integration
    file: api-tkaburagi/ci/tasks/prepare-integration.yml
    params:
      CF_MANIFEST_HOST: {{cf-manifest-host-staging}}
  - put: cf-staging
    params:
      manifest: prepare-integration/manifest-staging.yml
  - task: integration
    file: api-tkaburagi/ci/tasks/integration.yml

- name: load-test
  serial: true
  plan:
  - get: candidate-release
    passed: [ integration-test ]
    trigger: true
  - get: api-tkaburagi
    passed: [ integration-test ]
    trigger: true
  - task: load-test
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: appropriate/curl
      run:
        path: sh
        args:
        - -c
        - |
          sleep 10
          i=0
          while [[ $i -ne 10 ]]; do
            code=`curl -LI http://api-tkaburagi-development.apps.pcf.pcflab.jp -o /dev/null -w '%{http_code}\n' -s`;
            if [[ ${code} = "200" ]]; then
                echo ${code};
              echo "ok";
            else
              echo "abort!!";
              exit 1
            fi
            i=`expr $i + 1`;
            sleep 1;
          done

- name: ship-it
  serial_groups: [ version ]
  plan:
  - get: candidate-release
    passed: [ load-test ]
    trigger: true
  - get: api-tkaburagi
    passed: [ load-test ]
    trigger: true
  - get: version
    params: { bump: final }
  - task: prepare-final
    file: api-tkaburagi/ci/tasks/prepare-final.yml
  - put: final-release
    params: { file: prepare-final/api-tkaburagi-*.jar }
  - put: version
    params: { file: version/number }

- name: promotion
  serial: true
  plan:
  - get: final-release
    trigger: true
    passed: [ship-it]
  - get: api-tkaburagi
    passed: [ship-it]
    trigger: true
  - get: version
    passed: [ ship-it ]
  - task: make-manifest
    file: api-tkaburagi/ci/tasks/make-manifest.yml
    params:
      CF_MANIFEST_HOST: {{cf-manifest-host-prod}}
  - put: cf-production
    params:
      manifest: makemanifest/manifest-production.yml
      current_app_name: api-tkaburagi

- name: major
  serial_groups: [ version ]
  plan:
  - put: version
    params: { bump: major, pre: rc }

- name: minor
  serial_groups: [ version ]
  plan:
  - put: version
    params: { bump: minor, pre: rc }

- name: bump-version
  serial_groups: [ version ]
  plan:
  - get: version
    passed: [ ship-it ]
    trigger: true
  - put: version
    params: { bump: patch, pre: rc }